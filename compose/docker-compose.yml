services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - "${BASE_STORAGE_DIR}/zookeeper:/var/lib/zookeeper"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    #    ports:
    #      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - "${BASE_STORAGE_DIR}/kafka:/var/lib/kafka"

  redis:
    container_name: redis
    image: redis/redis-stack-server
    restart: always
    volumes:
      - "${BASE_STORAGE_DIR}/redis:/var/lib/zookeeper"

  clickhouse:
    container_name: clickhouse
    image: clickhouse/clickhouse-server
    restart: always
    ports:
      - "8123:8123"
    environment:
      CLICKHOUSE_DB: "${APP_NAME}"
      CLICKHOUSE_USER: "${CLICKHOUSE_USER}"
      CLICKHOUSE_PASSWORD: "${CLICKHOUSE_PASSWORD}"
    volumes:
      - "${BASE_STORAGE_DIR}/clickhouse:/var/lib/clickhouse"
  mysql:
    container_name: mysql
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${APP_NAME}"
    volumes:
      - "${BASE_STORAGE_DIR}/mysql:/var/lib/mysql"
  mongo:
    container_name: mongo
    image: mongo
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_ROOT_PASSWORD}"
    volumes:
      - "${BASE_STORAGE_DIR}/mongo:/etc/mongo"

  kgs-service:
    container_name: kgs-service
    image: brev/kgs-service
    restart: always
    ports:
      - "8081:80"
    environment:
      server.port: 80
      spring.profiles.active: production
      app.zookeeper-path: "/${APP_NAME}/kgs/range"
      app.range-size: 100000
      spring.cloud.zookeeper.connect-string: "zookeeper:2181"

  url-service:
    container_name: url-service
    image: brev/url-service
    restart: always
    ports:
      - "8082:80"
    environment:
      server.port: 80
      spring.profiles.active: production
      spring.data.redis.url: "redis://redis:6379"
      spring.kafka.bootstrap-servers: "kafka:29092"
      app.kgs-base-url: "http://kgs-service"
      spring.data.mongodb.database: "${APP_NAME}"
      spring.data.mongodb.uri: "mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017"
      jwt.secret: "${JWT_SECRET}"
      app.kafka.topic: "${KAFKA_METRIC_TOPICS}"

  analytics-service:
    container_name: analytics-service
    image: brev/analytics-service
    restart: always
    ports:
      - "8080:80"
    environment:
      server.port: 80
      spring.profiles.active: production
      spring.kafka.bootstrap-servers: "kafka:29092"
      app.kgs-base-url: "http://kgs-service"
      jwt.secret: "${JWT_SECRET}"
      spring.datasource.url: "jdbc:ch://clickhouse/${APP_NAME}"
      spring.datasource.username: "${CLICKHOUSE_USER}"
      spring.datasource.password: "${CLICKHOUSE_PASSWORD}"
      app.kafka.topic: "${KAFKA_METRIC_TOPICS}"

  users-service:
    container_name: users-service
    image: brev/users-service
    restart: always
    ports:
      - "8083:80"
    environment:
      server.port: 80
      spring.profiles.active: production
      spring.datasource.url: "jdbc:mysql://mysql:3306/${APP_NAME}"
      spring.datasource.username: "${MYSQL_USER}"
      spring.datasource.password: "${MYSQL_PASSWORD}"
      spring.jpa.hibernate.ddl-auto: create
      app.kafka.topic: "${KAFKA_METRIC_TOPICS}"
      jwt.secret: "${JWT_SECRET}"
      jwt.issuer: "${APP_NAME}"
      jwt.token.ttl: "${TOKEN_TTL}"

  web:
    container_name: web
    image: brev/web
    restart: always
    ports:
      - "80:80"
